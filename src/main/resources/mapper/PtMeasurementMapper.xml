<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rufeng.healthman.mapper.PtMeasurementMapper">
    <resultMap id="BaseResultMap" type="com.rufeng.healthman.pojo.ptdo.PtMeasurement">
        <!--@mbg.generated-->
        <!--@Table pt_measurement-->
        <id column="ms_id" property="msId"/>
        <result column="ms_name" property="msName"/>
        <result column="ms_desp" property="msDesp"/>
        <result column="ms_created" property="msCreated"/>
        <result column="ms_modified" property="msModified"/>
        <result column="grp_id" property="grpId"/>
        <result column="ms_created_admin" property="msCreatedAdmin"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        ms_id, ms_name, ms_desp, ms_created, ms_modified, grp_id, ms_created_admin
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        <!--@mbg.generated-->
        select
        <include refid="Base_Column_List"/>
        from pt_measurement
        where ms_id = #{msId}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        <!--@mbg.generated-->
        delete
        from pt_measurement
        where ms_id = #{msId}
    </delete>
    <insert id="insert" keyColumn="ms_id" keyProperty="msId"
            parameterType="com.rufeng.healthman.pojo.ptdo.PtMeasurement"
            useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into pt_measurement (ms_name, ms_desp, ms_created, ms_modified, grp_id, ms_created_admin)
        values (#{msName}, #{msDesp}, #{msCreated}, #{msModified}, #{grpId}, #{msCreatedAdmin})
    </insert>
    <insert id="insertSelective" keyColumn="ms_id" keyProperty="msId"
            parameterType="com.rufeng.healthman.pojo.ptdo.PtMeasurement" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into pt_measurement
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="msName != null">
                ms_name,
            </if>
            <if test="msDesp != null">
                ms_desp,
            </if>
            <if test="msCreated != null">
                ms_created,
            </if>
            <if test="msModified != null">
                ms_modified,
            </if>
            <if test="grpId != null">
                grp_id,
            </if>
            <if test="msCreatedAdmin != null">
                ms_created_admin,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="msName != null">
                #{msName},
            </if>
            <if test="msDesp != null">
                #{msDesp},
            </if>
            <if test="msCreated != null">
                #{msCreated},
            </if>
            <if test="msModified != null">
                #{msModified},
            </if>
            <if test="grpId != null">
                #{grpId},
            </if>
            <if test="msCreatedAdmin != null">
                #{msCreatedAdmin},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.rufeng.healthman.pojo.ptdo.PtMeasurement">
        <!--@mbg.generated-->
        update pt_measurement
        <set>
            <if test="msName != null">
                ms_name = #{msName},
            </if>
            <if test="msDesp != null">
                ms_desp = #{msDesp},
            </if>
            <if test="msCreated != null">
                ms_created = #{msCreated},
            </if>
            <if test="msModified != null">
                ms_modified = #{msModified},
            </if>
            <if test="grpId != null">
                grp_id = #{grpId},
            </if>
            <if test="msCreatedAdmin != null">
                ms_created_admin = #{msCreatedAdmin},
            </if>
        </set>
        where ms_id = #{msId}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.rufeng.healthman.pojo.ptdo.PtMeasurement">
        <!--@mbg.generated-->
        update pt_measurement
        set ms_name          = #{msName},
            ms_desp          = #{msDesp},
            ms_created       = #{msCreated},
            ms_modified      = #{msModified},
            grp_id           = #{grpId},
            ms_created_admin = #{msCreatedAdmin}
        where ms_id = #{msId}
    </update>
    <update id="updateBatch" parameterType="java.util.List">
        <!--@mbg.generated-->
        update pt_measurement
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="ms_name = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when ms_id = #{item.msId} then #{item.msName}
                </foreach>
            </trim>
            <trim prefix="ms_desp = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when ms_id = #{item.msId} then #{item.msDesp}
                </foreach>
            </trim>
            <trim prefix="ms_created = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when ms_id = #{item.msId} then #{item.msCreated}
                </foreach>
            </trim>
            <trim prefix="ms_modified = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when ms_id = #{item.msId} then #{item.msModified}
                </foreach>
            </trim>
            <trim prefix="grp_id = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when ms_id = #{item.msId} then #{item.grpId}
                </foreach>
            </trim>
            <trim prefix="ms_created_admin = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when ms_id = #{item.msId} then #{item.msCreatedAdmin}
                </foreach>
            </trim>
        </trim>
        where ms_id in
        <foreach close=")" collection="list" item="item" open="(" separator=", ">
            #{item.msId}
        </foreach>
    </update>
    <update id="updateBatchSelective" parameterType="java.util.List">
        <!--@mbg.generated-->
        update pt_measurement
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="ms_name = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.msName != null">
                        when ms_id = #{item.msId} then #{item.msName}
                    </if>
                </foreach>
            </trim>
            <trim prefix="ms_desp = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.msDesp != null">
                        when ms_id = #{item.msId} then #{item.msDesp}
                    </if>
                </foreach>
            </trim>
            <trim prefix="ms_created = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.msCreated != null">
                        when ms_id = #{item.msId} then #{item.msCreated}
                    </if>
                </foreach>
            </trim>
            <trim prefix="ms_modified = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.msModified != null">
                        when ms_id = #{item.msId} then #{item.msModified}
                    </if>
                </foreach>
            </trim>
            <trim prefix="grp_id = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.grpId != null">
                        when ms_id = #{item.msId} then #{item.grpId}
                    </if>
                </foreach>
            </trim>
            <trim prefix="ms_created_admin = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.msCreatedAdmin != null">
                        when ms_id = #{item.msId} then #{item.msCreatedAdmin}
                    </if>
                </foreach>
            </trim>
        </trim>
        where ms_id in
        <foreach close=")" collection="list" item="item" open="(" separator=", ">
            #{item.msId}
        </foreach>
    </update>
    <insert id="batchInsert" keyColumn="ms_id" keyProperty="msId" parameterType="map" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into pt_measurement
            (ms_name, ms_desp, ms_created, ms_modified, grp_id, ms_created_admin)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.msName}, #{item.msDesp}, #{item.msCreated}, #{item.msModified}, #{item.grpId},
             #{item.msCreatedAdmin})
        </foreach>
    </insert>
    <insert id="insertOrUpdate" keyColumn="ms_id" keyProperty="msId"
            parameterType="com.rufeng.healthman.pojo.ptdo.PtMeasurement" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into pt_measurement
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="msId != null">
                ms_id,
            </if>
            ms_name,
            ms_desp,
            ms_created,
            ms_modified,
            grp_id,
            ms_created_admin,
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="msId != null">
                #{msId},
            </if>
            #{msName},
            #{msDesp},
            #{msCreated},
            #{msModified},
            #{grpId},
            #{msCreatedAdmin},
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="msId != null">
                ms_id = #{msId},
            </if>
            ms_name          = #{msName},
            ms_desp          = #{msDesp},
            ms_created       = #{msCreated},
            ms_modified      = #{msModified},
            grp_id           = #{grpId},
            ms_created_admin = #{msCreatedAdmin},
        </trim>
    </insert>
    <insert id="insertOrUpdateSelective" keyColumn="ms_id" keyProperty="msId"
            parameterType="com.rufeng.healthman.pojo.ptdo.PtMeasurement" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into pt_measurement
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="msId != null">
                ms_id,
            </if>
            <if test="msName != null">
                ms_name,
            </if>
            <if test="msDesp != null">
                ms_desp,
            </if>
            <if test="msCreated != null">
                ms_created,
            </if>
            <if test="msModified != null">
                ms_modified,
            </if>
            <if test="grpId != null">
                grp_id,
            </if>
            <if test="msCreatedAdmin != null">
                ms_created_admin,
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="msId != null">
                #{msId},
            </if>
            <if test="msName != null">
                #{msName},
            </if>
            <if test="msDesp != null">
                #{msDesp},
            </if>
            <if test="msCreated != null">
                #{msCreated},
            </if>
            <if test="msModified != null">
                #{msModified},
            </if>
            <if test="grpId != null">
                #{grpId},
            </if>
            <if test="msCreatedAdmin != null">
                #{msCreatedAdmin},
            </if>
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="msId != null">
                ms_id = #{msId},
            </if>
            <if test="msName != null">
                ms_name = #{msName},
            </if>
            <if test="msDesp != null">
                ms_desp = #{msDesp},
            </if>
            <if test="msCreated != null">
                ms_created = #{msCreated},
            </if>
            <if test="msModified != null">
                ms_modified = #{msModified},
            </if>
            <if test="grpId != null">
                grp_id = #{grpId},
            </if>
            <if test="msCreatedAdmin != null">
                ms_created_admin = #{msCreatedAdmin},
            </if>
        </trim>
    </insert>

    <select id="pageMeasurement" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM pt_measurement
        <where>
            <if test="query.msName != null">
                <bind name="msName" value="'%' + query.msName + '%'"/>
                AND ms_name like #{msName}
            </if>
        </where>
    </select>

    <select id="countCompStuByMsIds" resultType="java.util.Map">
        # 测验中学生基本信息
        WITH stus AS (SELECT ms_id,
                             stu_id,
                             stu_gender,
                             YEAR(cms_created) - pc.cls_entry_year + pc.cls_entry_grade AS grade
                      FROM pt_class_measurement
                               LEFT JOIN pt_class pc
                                         on pt_class_measurement.cls_code = pc.cls_code
                               LEFT JOIN pt_student ps on pc.cls_code = ps.cls_code
        <where>
            <foreach collection="list" item="item" separator="," open="ms_id IN (" close=")">
                #{item}
            </foreach>
        </where>
        ),
#      测验科目信息
        subs AS (SELECT sub_id, ms_id
                 from pt_subject_subgroup
                          LEFT JOIN pt_measurement ON pt_measurement.grp_id = pt_subject_subgroup.grp_id
                          LEFT JOIN pt_subgroup ps ON pt_subject_subgroup.grp_id = ps.grp_id
        <where>
            <foreach collection="list" item="item" separator="," open="pt_measurement.ms_id IN (" close=")">
                #{item}
            </foreach>
        </where>
        ),
#      测验中学生需要测验的科目
stusubs AS (
    SELECT stu_id, stus.ms_id, subs.sub_id
    FROM subs
             INNER JOIN stus
                        ON stus.ms_id = subs.ms_id
             INNER JOIN pt_sub_student pss
                        ON pss.grade = stus.grade AND
                           stu_gender = pss.gender AND
                           subs.sub_id = pss.sub_id)
        select t1.ms_id, count(t1.stu_id)
        from (select stu_id, ms_id, count(sub_id) as cnt
              from stusubs
              where exists(select stu_id
                           from pt_score
                           where stusubs.stu_id = pt_score.stu_id
                             and pt_score.sub_id = stusubs.sub_id
                             and stusubs.ms_id = pt_score.ms_id)
              group by stu_id, ms_id) t1
                 INNER JOIN (select stu_id, ms_id, count(sub_id) as cnt from stusubs group by ms_id, stu_id) t2
                            ON t1.ms_id = t2.ms_id AND t1.stu_id = t2.stu_id AND t1.cnt = t2.cnt
        group by t1.ms_id;
    </select>

    <select id="countCompStuByMsId" resultType="int">
        # 测验中学生基本信息
        WITH stus AS (SELECT stu_id,
                             stu_gender,
                             YEAR(cms_created) - pc.cls_entry_year + pc.cls_entry_grade AS grade
                      FROM pt_class_measurement
                               LEFT JOIN pt_class pc
                                         on pt_class_measurement.cls_code = pc.cls_code
                               LEFT JOIN pt_student ps on pc.cls_code = ps.cls_code
                      WHERE ms_id = #{msId}),
#      测验科目信息
             subs AS (SELECT sub_id
                      from pt_subject_subgroup
                               left join pt_measurement on pt_measurement.grp_id = pt_subject_subgroup.grp_id
                               LEFT JOIN pt_subgroup ps on pt_subject_subgroup.grp_id = ps.grp_id
                      WHERE pt_measurement.ms_id = #{msId}),
#      测验中学生需要测验的科目
             stusubs AS (
                 SELECT stu_id, subs.sub_id
                 FROM subs
                          JOIN stus
                          INNER JOIN pt_sub_student pss
                                     ON pss.grade = stus.grade AND
                                        stu_gender = pss.gender AND
                                        subs.sub_id = pss.sub_id)
        select count(t1.stu_id)
        from (select stu_id, count(sub_id) as cnt
              from stusubs
              where exists(select stu_id
                           from pt_score
                           where stusubs.stu_id = pt_score.stu_id
                             and pt_score.sub_id = stusubs.sub_id
                             AND pt_score.ms_id = #{msId})
              group by stu_id) t1
                 INNER JOIN (select stu_id, count(sub_id) as cnt from stusubs group by stu_id) t2
                            ON t1.stu_id = t2.stu_id AND t1.cnt >= t2.cnt;
    </select>

    <select id="listMeasurement" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM pt_measurement
        <where>
            <foreach collection="list" item="item" open="ms_id IN (" close=")" separator=",">
                #{item}
            </foreach>
        </where>
    </select>

    <select id="countStuByMsIds" resultType="map">
        WITH stus AS (
        SELECT ms_id, stu_id, stu_gender AS gender, YEAR(cms_created) - pc.cls_entry_year + pc.cls_entry_grade AS grade
        FROM pt_class_measurement
                 INNER JOIN pt_class pc on pt_class_measurement.cls_code = pc.cls_code
                 INNER JOIN pt_student ps on pc.cls_code = ps.cls_code
        <where>
            <foreach collection="list" item="item" separator="," open="ms_id IN (" close=")">
                #{item}
            </foreach>
        </where>
        ),
            #      测验科目信息
            subs AS (SELECT sub_id, ms_id
                     from pt_subject_subgroup
                              INNER JOIN pt_measurement on pt_measurement.grp_id = pt_subject_subgroup.grp_id
                              INNER JOIN pt_subgroup ps on pt_subject_subgroup.grp_id = ps.grp_id),
            stusubs AS (SELECT stus.ms_id, gender, grade, sub_id, stus.stu_id
                        FROM subs
                                 INNER JOIN stus ON subs.ms_id = stus.ms_id)
        SELECT ms_id, COUNT(stu_id)
        FROM (SELECT ms_id, stu_id
              FROM stusubs
              WHERE EXISTS(SELECT sub_id
                           FROM pt_score_sheet pss
                           WHERE pss.grade = stusubs.grade
                             AND pss.gender = stusubs.gender
                             AND pss.sub_id = stusubs.sub_id)
              GROUP BY ms_id, stu_id) t
        GROUP BY ms_id;
    </select>

    <select id="countStuByMsId" resultType="int">
        WITH stus AS (
            SELECT ms_id,
                   stu_id,
                   stu_gender                                                 AS gender,
                   YEAR(cms_created) - pc.cls_entry_year + pc.cls_entry_grade AS grade
            FROM pt_class_measurement
                     INNER JOIN pt_class pc on pt_class_measurement.cls_code = pc.cls_code
                     INNER JOIN pt_student ps on pc.cls_code = ps.cls_code
            WHERE ms_id = #{msId}),
             #      测验科目信息
             subs AS (SELECT sub_id
                      from pt_subject_subgroup
                               INNER JOIN pt_measurement on pt_measurement.grp_id = pt_subject_subgroup.grp_id
                               INNER JOIN pt_subgroup ps on pt_subject_subgroup.grp_id = ps.grp_id
                      WHERE ms_id = #{msId}),
             stusubs AS (SELECT gender, grade, sub_id, stus.stu_id
                         FROM subs
                                  JOIN stus)
        SELECT COUNT(0)
        FROM (SELECT stu_id
              FROM stusubs
              WHERE EXISTS(SELECT sub_id
                           FROM pt_score_sheet pss
                           WHERE pss.grade = stusubs.grade
                             AND pss.gender = stusubs.gender
                             AND pss.sub_id = stusubs.sub_id)
              GROUP BY stu_id) t;
    </select>

    <select id="listMsSubStatus" resultType="com.rufeng.healthman.pojo.dto.ptmeasurement.MeasurementSubStatus">
        WITH stu AS (SELECT stu_gender,
                            cls_code
                     FROM pt_student
                     WHERE stu_id = #{stuId})
           , ms AS (SELECT ms_id,
                           YEAR(cms_created) - pc.cls_entry_year + pc.cls_entry_grade AS grade,
                           stu_gender                                                 AS gender
                    FROM pt_class_measurement
                             INNER JOIN stu ON stu.cls_code = pt_class_measurement.cls_code
                             INNER JOIN pt_class pc on pt_class_measurement.cls_code = pc.cls_code
        <where>
            <foreach collection="list" open="ms_id IN (" close=")" separator="," item="item">
                #{item}
            </foreach>
        </where>
        )
           , grps AS (SELECT ms.ms_id, grp_id, grade, gender
                      FROM ms
                               INNER JOIN pt_measurement ON ms.ms_id = pt_measurement.ms_id)
           , ms_stu_info AS (SELECT ms_id, ps.sub_id, grps.gender, grps.grade
                             FROM grps
                                      INNER JOIN pt_subject_subgroup ON pt_subject_subgroup.grp_id = grps.grp_id
                                      INNER JOIN pt_subject ps on pt_subject_subgroup.sub_id = ps.sub_id)
           ,
           #     需要参加的测试及科目数
            ms_sub AS (SELECT ms_id, sub_id
                       FROM ms_stu_info
                       WHERE EXISTS(SELECT sub_id
                                    FROM pt_score_sheet
                                    WHERE pt_score_sheet.sub_id = ms_stu_info.sub_id
                                      AND ms_stu_info.gender = pt_score_sheet.gender
                                      AND pt_score_sheet.grade = ms_stu_info.grade)
                       GROUP BY ms_id, sub_id)
           ,
           # 当前完成情况
            ms_comp_sub AS (SELECT ms_id, sub_id
                            FROM pt_score
                            WHERE stu_id = #{stuId}
                            GROUP BY ms_id, sub_id)

        SELECT ms_sub.ms_id, ms_sub.sub_id, IF(ms_comp_sub.ms_id IS NULL, 0, 1) AS status
        FROM ms_sub
                 LEFT JOIN ms_comp_sub ON ms_sub.ms_id = ms_comp_sub.ms_id AND ms_sub.sub_id = ms_comp_sub.sub_id;
    </select>
    <select id="listStuMsStatus" resultType="map">
        WITH stu AS (SELECT stu_gender,
                            cls_code
                     FROM pt_student
                     WHERE stu_id = #{stuId})
           , ms AS (SELECT ms_id,
                           YEAR(cms_created) - pc.cls_entry_year + pc.cls_entry_grade AS grade,
                           stu_gender                                                 AS gender
                    FROM pt_class_measurement
                             INNER JOIN stu ON stu.cls_code = pt_class_measurement.cls_code
                             INNER JOIN pt_class pc on pt_class_measurement.cls_code = pc.cls_code)
           , grps AS (SELECT ms.ms_id, grp_id, grade, gender
                      FROM ms
                               INNER JOIN pt_measurement ON ms.ms_id = pt_measurement.ms_id)
           , ms_stu_info AS (SELECT ms_id, ps.sub_id, grps.gender, grps.grade
                             FROM grps
                                      INNER JOIN pt_subject_subgroup ON pt_subject_subgroup.grp_id = grps.grp_id
                                      INNER JOIN pt_subject ps on pt_subject_subgroup.sub_id = ps.sub_id)
           ,
           #     需要参加的测试及科目数
            ms_sub_cnt AS (SELECT ms_id, COUNT(sub_id) as count
                           FROM ms_stu_info
                           WHERE EXISTS(SELECT sub_id
                                        FROM pt_score_sheet
                                        WHERE pt_score_sheet.sub_id = ms_stu_info.sub_id
                                          AND ms_stu_info.gender = pt_score_sheet.gender
                                          AND pt_score_sheet.grade = ms_stu_info.grade)
                           GROUP BY ms_id)
           ,
           # 当前完成情况
            ms_comp_sub_cnt AS (SELECT ms_id, count(sub_id) as count
                                FROM pt_score
                                WHERE stu_id = #{stuId}
                                GROUP BY ms_id)
           # 是否完成所有科目
        SELECT ms_sub_cnt.ms_id, COUNT(ms_comp_sub_cnt.ms_id)
        FROM ms_sub_cnt
                 LEFT JOIN ms_comp_sub_cnt
                           ON ms_sub_cnt.count = ms_comp_sub_cnt.count AND ms_comp_sub_cnt.ms_id = ms_sub_cnt.ms_id
        group by ms_sub_cnt.ms_id;
    </select>

    <select id="pageStuMs" resultType="com.rufeng.healthman.pojo.ptdo.PtMeasurement">
        WITH stu AS (SELECT stu_gender,
                            cls_code
                     FROM pt_student
                     WHERE stu_id = #{stuId})
           , ms AS (SELECT ms_id,
                           YEAR(cms_created) - pc.cls_entry_year + pc.cls_entry_grade AS grade,
                           stu_gender                                                 AS gender
                    FROM pt_class_measurement
                             INNER JOIN stu ON stu.cls_code = pt_class_measurement.cls_code
                             INNER JOIN pt_class pc on pt_class_measurement.cls_code = pc.cls_code)
           , grps AS (SELECT ms.ms_id, grp_id, grade, gender
                      FROM ms
                               INNER JOIN pt_measurement ON ms.ms_id = pt_measurement.ms_id)
           , ms_stu_info AS (SELECT ms_id, ps.sub_id, grps.gender, grps.grade
                             FROM grps
                                      INNER JOIN pt_subject_subgroup ON pt_subject_subgroup.grp_id = grps.grp_id
                                      INNER JOIN pt_subject ps on pt_subject_subgroup.sub_id = ps.sub_id)
           ,
           #     需要参加的测试
            ms_ids AS (SELECT DISTINCT ms_id
                       FROM ms_stu_info
                       WHERE EXISTS(SELECT sub_id
                                    FROM pt_score_sheet
                                    WHERE pt_score_sheet.sub_id = ms_stu_info.sub_id
                                      AND ms_stu_info.gender = pt_score_sheet.gender
                                      AND pt_score_sheet.grade = ms_stu_info.grade))
        SELECT pt_measurement.ms_id, ms_name, ms_desp, ms_created, ms_modified, grp_id, ms_created_admin
        FROM ms_ids
                 INNER JOIN pt_measurement ON ms_ids.ms_id = pt_measurement.ms_id
    </select>
</mapper>